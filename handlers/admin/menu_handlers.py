import os

from aiogram import types
from aiogram.enums import ParseMode
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile


from filters.isAdmin import IsAdmin
from loader import dp


class GetMessage(StatesGroup):
    get_text=State()


@dp.message(Text('–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö'))
async def export_database(message:Message):
    file = os.path.abspath('tg.db')
    file = FSInputFile(file)
    await message.answer_document(file,caption="–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ")

@dp.message(IsAdmin(),Text('–í–∏–∫–æ–Ω–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É'))
async def mailing_edit(message:Message,state:FSMContext):
    await state.set_state(GetMessage.get_text)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –± –í–∏ —Ö–æ—Ç—ñ–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞–º:")


@dp.message(IsAdmin(),GetMessage.get_text)
async def get_text(message:Message,state:FSMContext):

    if len(message.text)>3000:
        await message.answer(f'–í–∏ –≤–≤–µ–ª–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞.')
    else:
        buttons=[
            [types.InlineKeyboardButton(text="‚úÖ–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="mailing_accept")],
            [types.InlineKeyboardButton(text="‚úçÔ∏è–í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="mailing_edit")],
            [types.InlineKeyboardButton(text="üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="mailing_back")]
                  ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons, resize_keyboard=True)

        await state.update_data(mailing_text=message.text)

        await message.answer(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è, –∞–±–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ç–µ–∫—Å—Ç: \n\n{message.text}",reply_markup=keyboard,parse_mode=ParseMode.HTML)





