import datetime
import os

from aiogram import types
from aiogram.enums import ParseMode
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile


from filters.isAdmin import IsAdmin
from loader import dp


class GetMessage(StatesGroup):
    get_text=State()


@dp.message(IsAdmin(),Text('–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö'))
async def export_database(message:Message,state:FSMContext):
    await state.set_state(None)
    file = os.path.abspath('tg.db')
    file = FSInputFile(file)
    await message.answer_document(file,caption="–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ")

@dp.message(IsAdmin(),Text('–í–∏–∫–æ–Ω–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É'))
async def mailing_edit(message:Message,state:FSMContext):
    await state.set_state(GetMessage.get_text)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –± –í–∏ —Ö–æ—Ç—ñ–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞–º:")


@dp.message(IsAdmin(),GetMessage.get_text)
async def get_text(message:Message,state:FSMContext):
    if len(message.text)>3000:
        await message.answer(f'–í–∏ –≤–≤–µ–ª–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞.')
    else:
        buttons=[
            [types.InlineKeyboardButton(text="‚úÖ–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="mailing_accept")],
            [types.InlineKeyboardButton(text="‚úçÔ∏è–í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="mailing_edit")],
            [types.InlineKeyboardButton(text="üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="mailing_back")]
                  ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons, resize_keyboard=True)

        await state.update_data(mailing_text=message.html_text)

        await message.answer(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è, –∞–±–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ç–µ–∫—Å—Ç: \n\n{message.html_text}",reply_markup=keyboard,parse_mode=ParseMode.HTML)




@dp.message(IsAdmin(),Text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def send_stat(message:Message):
    from db.get_stat import get_click_stat,get_treatments_from_day,get_new_users
    btns_get_info=[
        'üìû–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏üìû',
        '‚úçÔ∏è–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é‚úçÔ∏è',
        'üìù–ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—èüìù',
        '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏'
    ]

    days = [1, 7, 30, 0]

    # text='–ö–ª—ñ–∫—ñ–≤: \n'
    # for btn in btns_get_info:
    #     clicks=await get_clicks(btn_name=btn)
    #     text=text+f"{btn}: \n"\
    #               f"–°—å–æ–≥–æ–¥–Ω—ñ: {clicks['day']} \n"\
    #               f"–¢–∏–∂–¥–µ–Ω—å: {clicks['week']}\n"\
    #               f"–ú—ñ—Å—è—Ü—å: {clicks['month']}\n"\
    #               f"–£–≤–µ—Å—å —á–∞—Å: {clicks['all_time']}\n\n"

    text = '–ö–ª—ñ–∫—ñ–≤: \n'
    for btn in btns_get_info:

        clicks=[await get_click_stat(btn,day) for day in days]
        text=text+f"{btn}: \n"\
                  f"24 –≥–æ–¥–∏–Ω–∏: {clicks[0]} \n"\
                  f"–¢–∏–∂–¥–µ–Ω—å: {clicks[1]}\n"\
                  f"–ú—ñ—Å—è—Ü—å: {clicks[2]}\n"\
                  f"–£–≤–µ—Å—å —á–∞—Å: {clicks[3]}\n\n"


    treatments=[await get_treatments_from_day(day) for day in days]
    text=text+f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π:\n" \
              f"24 –≥–æ–¥–∏–Ω–∏: {treatments[0]} \n"\
              f"–¢–∏–∂–¥–µ–Ω—å: {treatments[1]}\n"\
              f"–ú—ñ—Å—è—Ü—å: {treatments[2]}\n"\
              f"–£–≤–µ—Å—å —á–∞—Å: {treatments[3]}\n\n"


    new_users=[await get_new_users(day) for day in days]
    text=text+f"–ù–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n" \
              f"24 –≥–æ–¥–∏–Ω–∏: {new_users[0]} \n"\
              f"–¢–∏–∂–¥–µ–Ω—å: {new_users[1]}\n"\
              f"–ú—ñ—Å—è—Ü—å: {new_users[2]}\n"\
              f"–£–≤–µ—Å—å —á–∞—Å: {new_users[3]}\n\n"


    await message.answer(text=text)