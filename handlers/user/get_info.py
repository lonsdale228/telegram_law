from aiogram import F, types
from aiogram.enums import ParseMode
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, Message

from config import admin_service
from db.add_phone_number import add_phone
from db.add_stat import add_click
from db.add_treatment import add_treatment
from filters.isUser import IsUser
from keyboards.dict_to_keyboard import get_keyboard
from keyboards.inline_menu import menu
from loader import dp, bot
from strings.strings import choose_consult_text


class Form(StatesGroup):
    custom_question=State()

@dp.callback_query(IsUser(),Text('phone_accept'))
#@dp.callback_query(IsUser(),F.data.contains('another'))
async def get_more_info(callback: types.CallbackQuery,state:FSMContext):
    await state.set_state(Form.custom_question)

    await add_click(btn_name="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏")

    buttons = [
        [types.InlineKeyboardButton(text="üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="text_back")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons, resize_keyboard=True)


    msg=await callback.message.edit_text('–û–ø–∏—à—ñ—Ç—å –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É: ',reply_markup=keyboard)

    await state.update_data(declare_problem=msg.message_id)




# @dp.message(IsUser(),Form.custom_question)
# async def process_question(message:Message,state:FSMContext):
#     await state.update_data(custom_question=message.text)
#     #await state.update_data(service_type='another')
#
#     #print(message.text)
#     await message.answer(f'–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:\n\n"{message.text}"',reply_markup=await get_keyboard('check_question'))

@dp.message(IsUser(),Form.custom_question)
async def get_custom_question(message:Message,state:FSMContext):


    data = await state.get_data()
    phone_number = data['phone_number']
    service_type = data['service_type']
    service_name = menu['services'][service_type]
    consult_type = data['consult_type']

    try:
        edit_msg=data['declare_problem']
        await bot.delete_message(chat_id=message.from_user.id,message_id=edit_msg)
    except KeyError:
        ...


    custom_question = message.text

    await add_treatment(message.from_user.id, service_type, consult_type, custom_text=custom_question)

    await state.clear()


    await message.answer("–î—è–∫—É—î–º–æ! –ê–¥–≤–æ–∫–∞—Ç –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º 10 —Ö–≤.\n"
                                 "<em>*—á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–æ–∂–µ –∑–±—ñ–ª—å—à–∏—Ç–∏—Å—è —è–∫—â–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞–¥–≤–æ–∫–∞—Ç –∑–∞—Ä–∞–∑ —É —Å—É–¥—ñ –∞–±–æ –∑–∞–ø–∏—Ç –∑–∞–ª–∏—à–µ–Ω–æ –≤ –Ω–µ—Ä–æ–±–æ—á—ñ–π –ø–µ—Ä—ñ–æ–¥.</em>")

    send_service = admin_service[service_type]

    for admin in send_service:
        await bot.send_message(chat_id=admin, text=f'<b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é!</b>\n\n'
                                                   f'–í—ñ–¥: {message.from_user.full_name[:30]}\n'
                                                   f'–¢–µ–ª–µ–≥—Ä–∞–º –∫–ª—ñ—î–Ω—Ç–∞: <a href="tg://user?id={message.from_user.id}">–ö–ª—ñ–∫</a>\n'
                                                   f'–ö–æ–Ω—Ç–∞–∫—Ç–∏: <code>{phone_number}</code>\n'
                                                   f'–ù–∞–ø—Ä—è–º: {service_name}\n'
                                                   f'–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó: {menu["cons_type"][consult_type]} \n'
                                                   f'–°–∏—Ç—É–∞—Ü—ñ—è: \n\n'
                                                   f'"{custom_question}"', parse_mode=ParseMode.HTML)

@dp.callback_query(IsUser(),Text('change_text'))
async def change_question(callback: types.CallbackQuery,state:FSMContext):
    await state.set_state(Form.custom_question)
    await callback.message.edit_text('–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è: ')


